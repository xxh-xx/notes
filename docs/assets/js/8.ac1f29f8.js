(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{401:function(s,t,a){"use strict";a.r(t);var e=a(31),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"css-网格-css-grid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css-网格-css-grid"}},[s._v("#")]),s._v(" CSS 网格（CSS Grid）")]),s._v(" "),a("p",[s._v("通过将属性 "),a("code",[s._v("display")]),s._v(" 的值设为 "),a("code",[s._v("grid")]),s._v("，HTML 元素就可以变为网格容器。 通过前面的操作，你可以对该容器使用与 CSS 网格（CSS Grid）相关的属性。")]),s._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),a("p",[s._v("在 CSS 网格中，父元素称为容器（container），它的子元素称为项（items）。")])]),s._v(" "),a("h2",{attrs:{id:"使用-grid-template-columns-添加多列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-grid-template-columns-添加多列"}},[s._v("#")]),s._v(" 使用 grid-template-columns 添加多列")]),s._v(" "),a("p",[s._v("简单地添加一个网格元素并不会有任何明显的效果。 你还需要明确网格的结构。 在一个网格容器中使用 "),a("code",[s._v("grid-template-columns")]),s._v(" 属性可以添加一些列，示例如下：")]),s._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".container")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" grid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("grid-template-columns")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 50px 50px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面的代码会在网格容器中添加两列，宽度均为 50px。 "),a("code",[s._v("grid-template-columns")]),s._v(" 属性值的个数表示网格的列数，每个值表示相应的列宽度。")]),s._v(" "),a("h2",{attrs:{id:"使用-grid-template-rows-添加多行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-grid-template-rows-添加多行"}},[s._v("#")]),s._v(" 使用 grid-template-rows 添加多行")]),s._v(" "),a("p",[s._v("在上面，你创建的网格会自动设置行数。 要手动调整行，请使用 "),a("code",[s._v("grid-template-rows")]),s._v(" 属性，就像在上一个挑战中使用 "),a("code",[s._v("grid-template-columns")]),s._v(" 属性一样。")]),s._v(" "),a("h2",{attrs:{id:"使用-css-网格单位来更改列和行的大小"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-css-网格单位来更改列和行的大小"}},[s._v("#")]),s._v(" 使用 CSS 网格单位来更改列和行的大小")]),s._v(" "),a("p",[s._v("在 CSS 网格中，可以使用绝对单位（如 "),a("code",[s._v("px")]),s._v("）或相对单位（如 "),a("code",[s._v("em")]),s._v("）来定义行或列的大小。 下面的单位也可以使用：")]),s._v(" "),a("p",[a("code",[s._v("fr")]),s._v("：设置列或行占剩余空间的比例，")]),s._v(" "),a("p",[a("code",[s._v("auto")]),s._v("：设置列宽或行高自动等于它的内容的宽度或高度，")]),s._v(" "),a("p",[a("code",[s._v("%")]),s._v("：将列或行调整为它的容器宽度或高度的百分比，")]),s._v(" "),a("p",[s._v("以下代码为右侧预览区中的效果：")]),s._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[s._v("grid-template-columns")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" auto 50px 10% 2fr 1fr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这段代码添加了五个列。 第一列的宽与它的内容宽度相等；第二列宽 50px；第三列宽是它容器的 10%；最后两列，将剩余的宽度平均分成三份，第四列占两份，第五列占一份。")]),s._v(" "),a("h2",{attrs:{id:"使用-grid-column-gap-创建多列之间的间距"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-grid-column-gap-创建多列之间的间距"}},[s._v("#")]),s._v(" 使用 grid-column-gap 创建多列之间的间距")]),s._v(" "),a("p",[s._v("目前为止，在你所创建的网格中，每列都相互紧挨着。 有时候你想要列之间有一个间距。 如果需要在列与列之间添加一些间距，我们可以使用 "),a("code",[s._v("grid-column-gap")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[s._v("grid-column-gap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 10px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这会为我们创建的所有列之间都添加 10px 的空白间距。")]),s._v(" "),a("h2",{attrs:{id:"使用-grid-row-gap-创建多行之间的间距"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-grid-row-gap-创建多行之间的间距"}},[s._v("#")]),s._v(" 使用 grid-row-gap 创建多行之间的间距")]),s._v(" "),a("p",[s._v("和上面在两列之间添加间距一样，我们还可以用 "),a("code",[s._v("grid-row-gap")]),s._v(" 设置行间距。")]),s._v(" "),a("h2",{attrs:{id:"使用-grid-gap-为网格添加间距"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-grid-gap-为网格添加间距"}},[s._v("#")]),s._v(" 使用 grid-gap 为网格添加间距")]),s._v(" "),a("p",[a("code",[s._v("grid-gap")]),s._v(" 属性是前两个挑战中出现的 "),a("code",[s._v("grid-row-gap")]),s._v(" 和 "),a("code",[s._v("grid-column-gap")]),s._v(" 的简写属性，它更方便使用。 如果 "),a("code",[s._v("grid-gap")]),s._v(" 只有一个值，那么这个值表示行与行之间、列与列之间的间距均为这个值。 如果有两个值，那么第一个值表示行间距，第二个值表示列间距。")]),s._v(" "),a("h2",{attrs:{id:"使用-grid-column-来控制空间大小"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-grid-column-来控制空间大小"}},[s._v("#")]),s._v(" 使用 grid-column 来控制空间大小")]),s._v(" "),a("p",[s._v("到目前为止，所有的讨论都是围绕网格容器的。 "),a("code",[s._v("grid-column")]),s._v(" 属性是我们要讨论的，第一个用于网格项本身的属性。")]),s._v(" "),a("p",[s._v("网格中，假想的水平线和垂直线被称为线（lines）。 这些线在网格的左上角从 1 开始编号，垂直线向右、水平线向下累加计数。")]),s._v(" "),a("p",[s._v("这是一个 3x3 网格的线条：")]),s._v(" "),a("img",{attrs:{src:"file:///F:/Java/vuepress-starter/docs/front-end/CSS/img/grid-column.png",title:"",alt:"","data-align":"center"}}),s._v(" "),a("p",[s._v("要设置一个网格项占据几列，你可以使用 "),a("code",[s._v("grid-column")]),s._v(" 属性加上网格线条的编号来定义网格项开始和结束的位置。")]),s._v(" "),a("p",[s._v("示例如下：")]),s._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[s._v("grid-column")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 1 / 3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这会让网格项从左侧第一条线开始到第三条线结束，占用两列。")]),s._v(" "),a("h2",{attrs:{id:"使用-grid-row-来控制空间大小"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-grid-row-来控制空间大小"}},[s._v("#")]),s._v(" 使用 grid-row 来控制空间大小")]),s._v(" "),a("p",[s._v("和设置一个网格项占用多列类似，你也可以设置它占用多行。 你可以使用 "),a("code",[s._v("grid-row")]),s._v(" 属性来定义一个网格项开始和结束的水平线。")]),s._v(" "),a("h2",{attrs:{id:"使用-justify-self-水平对齐项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-justify-self-水平对齐项目"}},[s._v("#")]),s._v(" 使用 justify-self 水平对齐项目")]),s._v(" "),a("p",[s._v("在 CSS 网格中，每个网格项的内容分别位于被称为单元格（cell）的框内。 你可以使用网格项的 "),a("code",[s._v("justify-self")]),s._v(" 属性，设置其内容的位置在单元格内沿水平轴的对齐方式。 默认情况下，这个属性的值是 "),a("code",[s._v("stretch")]),s._v("，这将使内容占满整个单元格的宽度。 该 CSS 网格属性也可以使用其他的值：")]),s._v(" "),a("p",[a("code",[s._v("start")]),s._v("：使内容在单元格左侧对齐，")]),s._v(" "),a("p",[a("code",[s._v("center")]),s._v("：使内容在单元格居中对齐，")]),s._v(" "),a("p",[a("code",[s._v("end")]),s._v("：使内容在单元格右侧对齐，")]),s._v(" "),a("h2",{attrs:{id:"使用-align-self-垂直对齐项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-align-self-垂直对齐项目"}},[s._v("#")]),s._v(" 使用 align-self 垂直对齐项目")]),s._v(" "),a("p",[s._v("正如能设置网格项沿水平方向的对齐方式一样，我们也可以设置网格项沿竖直方向的对齐方式。 为此，我们可以对网格项使用 "),a("code",[s._v("align-self")]),s._v(" 属性来实现。 在上一个挑战中适用于 "),a("code",[s._v("justify-self")]),s._v(" 属性的属性值同样也可用于这个属性。")]),s._v(" "),a("h2",{attrs:{id:"使用-justify-items-水平对齐所有项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-justify-items-水平对齐所有项目"}},[s._v("#")]),s._v(" 使用 justify-items 水平对齐所有项目")]),s._v(" "),a("p",[s._v("有时你想让 CSS 网格中的网格项共享对齐方式。 你可以像之前学习的那样分别设置它们的对齐方式，也可以对网格容器使用 "),a("code",[s._v("justify-items")]),s._v(" 使它们一次性沿水平轴对齐。 这个属性能接受我们在之前两个挑战中学到的所有值作为属性值，但与之前不同的是，它会将网格中 "),a("strong",[s._v("所有")]),s._v(" 的网格项按所设置的方式对齐。")]),s._v(" "),a("h2",{attrs:{id:"使用-align-items-垂直对齐所有项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-align-items-垂直对齐所有项目"}},[s._v("#")]),s._v(" 使用 align-items 垂直对齐所有项目")]),s._v(" "),a("p",[s._v("对网格容器使用 "),a("code",[s._v("align-items")]),s._v(" 属性可以让网格中所有的网格项沿竖直方向对齐。")]),s._v(" "),a("h2",{attrs:{id:"将网格划分为区域模板"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将网格划分为区域模板"}},[s._v("#")]),s._v(" 将网格划分为区域模板")]),s._v(" "),a("p",[s._v("你可以将网格中的一些单元格组合成一个区域（area），并为该区域指定一个自定义名称。 可以通过给容器加上 "),a("code",[s._v("grid-template-areas")]),s._v(" 来实现：")]),s._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[s._v("grid-template-areas")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"header header header"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"advert content content"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"advert footer footer"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面的代码将网格单元格分成四个区域："),a("code",[s._v("header")]),s._v("、"),a("code",[s._v("advert")]),s._v("、"),a("code",[s._v("content")]),s._v(" 和 "),a("code",[s._v("footer")]),s._v("。 每个单词代表一个单元格，每对引号代表一行。")]),s._v(" "),a("h2",{attrs:{id:"grid-area"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grid-area"}},[s._v("#")]),s._v(" grid-area")]),s._v(" "),a("h3",{attrs:{id:"使用-grid-area-属性将项目放置在网格区域中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-grid-area-属性将项目放置在网格区域中"}},[s._v("#")]),s._v(" 使用 grid-area 属性将项目放置在网格区域中")]),s._v(" "),a("p",[s._v("像上面那样，在为网格添加区域模板后，可以通过引用你所定义的区域的名称，将元素放入相应的区域。 为此，你需要对网格项使用 "),a("code",[s._v("grid-area")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".item1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("grid-area")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" header"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("这样，class 为 "),a("code",[s._v("item1")]),s._v(" 的网格项就被放到了 "),a("code",[s._v("header")]),s._v(" 区域里。 在这个示例中，网格项将占用第一行整行，因为这一整行都被命名为标题区域。")]),s._v(" "),a("h3",{attrs:{id:"使用-grid-area-创建区域模板"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-grid-area-创建区域模板"}},[s._v("#")]),s._v(" 使用 grid-area 创建区域模板")]),s._v(" "),a("p",[s._v("我们在上面学到的 "),a("code",[s._v("grid-area")]),s._v(" 属性还有另一种使用方式。 如果网格中没有定义区域模板，你也可以像这样为它添加一个模板：")]),s._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v("item1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("grid-area")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 1/1/2/4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这里使用了你之前学习的网格线编号来定义网格项的区域。 上例中数字代表这些值：")]),s._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[s._v("grid-area")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" horizontal line to start at / vertical line to start at / horizontal line to end at / vertical line to end at"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("因此，示例中的网格项将占用第 1 条水平网格线（起始）和第 2 条水平网格线（终止）之间的行，及第 1 条垂直网格线（起始）和第 4 条垂直网格线（终止）之间的列。")]),s._v(" "),a("h2",{attrs:{id:"使用-repeat-函数减少重复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-repeat-函数减少重复"}},[s._v("#")]),s._v(" 使用 repeat 函数减少重复")]),s._v(" "),a("p",[s._v("使用 "),a("code",[s._v("grid-template-columns")]),s._v(" 或 "),a("code",[s._v("grid-template-rows")]),s._v(" 定义网格结构时，你需要为添加的每一行或每一列都输入一个值。")]),s._v(" "),a("p",[s._v("如果一个网格共有 100 行且每行高度相同， 那我们就需要输入 100 个值，这显然不太实际。 为此，更好的方式是使用 "),a("code",[s._v("repeat")]),s._v(" 方法指定行或列的重复次数，后面加上逗号以及需要重复的值。")]),s._v(" "),a("p",[s._v("以下为添加 100 行网格的例子，每行高度均为 50px：")]),s._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[s._v("grid-template-rows")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("repeat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("100"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 50px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("你还可以用 repeat 方法重复多个值，并在定义网格结构时与其他值一起使用。 比如：")]),s._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[s._v("grid-template-columns")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("repeat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 1fr 50px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 20px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("效果相当于：")]),s._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[s._v("grid-template-columns")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 1fr 50px 1fr 50px 20px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),a("p",[a("code",[s._v("1fr 50px")]),s._v(" 重复了两次，后面跟着 20px。")])]),s._v(" "),a("h2",{attrs:{id:"使用-minmax-函数限制项目大小"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-minmax-函数限制项目大小"}},[s._v("#")]),s._v(" 使用 minmax 函数限制项目大小")]),s._v(" "),a("p",[s._v("此外，内置函数 "),a("code",[s._v("minmax")]),s._v(" 也可用于设置 "),a("code",[s._v("grid-template-columns")]),s._v(" 和 "),a("code",[s._v("grid-template-rows")]),s._v(" 的值。 它的作用是在网格容器改变大小时限制网格项的大小。 为此，你需要指定网格项允许的尺寸范围。 例如：")]),s._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[s._v("grid-template-columns")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 100px "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("minmax")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("50px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 200px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("在上面的代码中，我们通过 "),a("code",[s._v("grid-template-columns")]),s._v(" 添加了两列，第一列宽度为 100px，第二列宽度最小值是 50px，最大值是 200px。")]),s._v(" "),a("h2",{attrs:{id:"使用-auto-fill-创建弹性布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-auto-fill-创建弹性布局"}},[s._v("#")]),s._v(" 使用 auto-fill 创建弹性布局")]),s._v(" "),a("p",[s._v("repeat 方法带有一个名为自动填充（auto-fill）的功能。 它的功能是根据容器的大小，尽可能多地放入指定大小的行或列。 你可以通过结合 "),a("code",[s._v("auto-fill")]),s._v(" 和 "),a("code",[s._v("minmax")]),s._v(" 来更灵活地布局。")]),s._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("repeat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("auto-fill"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("minmax")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("60px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 1fr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面的代码效果是这样：首先，列的宽度会随容器大小改变。其次，只要容器宽度不足以插入一个宽为 60px 的列，当前行的所有列就都会一直拉伸。请自己调整宽度，动手试一下就不难理解了。")]),s._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),a("p",[s._v("如果容器宽度不足以将所有网格项放在同一行，余下的网格项将会移至新的一行。")])]),s._v(" "),a("h2",{attrs:{id:"使用-auto-fit-创建弹性布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-auto-fit-创建弹性布局"}},[s._v("#")]),s._v(" 使用 auto-fit 创建弹性布局")]),s._v(" "),a("p",[a("code",[s._v("auto-fit")]),s._v(" 效果几乎和 "),a("code",[s._v("auto-fill")]),s._v(" 一样。 不同点仅在于，当容器的大小大于各网格项之和时，"),a("code",[s._v("auto-fill")]),s._v(" 会持续地在一端放入空行或空列，这样就会使所有网格项挤到另一边；而 "),a("code",[s._v("auto-fit")]),s._v(" 则不会在一端放入空行或空列，而是会将所有网格项拉伸至合适的大小。")]),s._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),a("p",[s._v("如果容器宽度不足以将所有网格项放在同一行，余下的网格项将会移至新的一行。")])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("更多")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://chinese.freecodecamp.org/learn/responsive-web-design/#css-grid",target:"_blank",rel:"noopener noreferrer"}},[s._v("响应式网页设计 认证 | freeCodeCamp.org"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://www.runoob.com/css3/css-grid.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("CSS 网格布局 | 菜鸟教程 (runoob.com)"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://www.runoob.com/css3/css-grid-container.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("CSS 网格容器 | 菜鸟教程 (runoob.com)"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://www.runoob.com/css3/css-grid-item.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("CSS 网格元素 | 菜鸟教程 (runoob.com)"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);